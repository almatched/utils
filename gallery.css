/* Here are gathered various CSS snippets to create a gallery */

/* Made with flex. On resize pictures zoom in and out. */
.gallery-wrapper {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.image-wrapper {
  flex: 1 1 20rem;
  min-height: 30vh;
  max-height: calc(50vh - 0.5rem);
}

img {
  object-fit: cover;
  width: 100%;
  height: 100%;
  opacity: 1;
}

img:hover {
  opacity: 0.7;
}

/* Made with flex and aspect-ratio. Pictures stay a defined aspect-ratio and therefore don't zoom in and out on resize */

.gallery-wrapper {
  --min: 15rem;
  --aspect-ratio: 4/3;
  --gap: .5rem;

  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);

  list-style: none;
  padding: 0;
  margin: 0;
}

.image-wrapper {
  height: max(15vh, 15rem);
  flex: 1 1 var(--min);
}

@supports (aspect-ratio: 1) {
  .image-wrapper {
    aspect-ratio: var(--aspect-ratio);
    height: auto;
  }
}

img {
  display: block;
  object-fit: cover;
  width: 100%;
  height: 100%;
}

/* Made with inline-grid. The grid cell shrinks to fit the content. I came to this solution when I had images of specific size, but grid cells were having extra space, when resizing the window.
More media-queries can be added to create more columns on larger screen sizes.
This solution was originally made with Tailwind, so maybe some things can be modified, for example "grid-template-columns" values. */

/* Example html structure

<div class="inline-grid-container-wrapper">
  <ul class="inline-grid-container">
    <li>...</li>
  </ul>
</div>
*/

/* If there are other elements present that need to be in the same element flow, for example a title. */

.inline-grid-container-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Another version that also works. */

.inline-grid-container-wrapper {
  text-align: center;
}

.inline-grid-container {
  display: inline-grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  gap: 0.75rem;
}

@media (min-width: 640px) {
  .inline-grid-container {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

/* Made with grid. The grid cell shrinks to fit the content. Not tested much, but worth experementing with. */

/* Example html structure 

<ul class="grid-container">
  <li class="grid-cell">
    <img />
  </li>
</ul>
*/

.grid-container {
  display: grid;
  grid-template-columns: repeat(1, fit-content(100%));
  justify-content: center;
  gap: 0.75rem;
}

/* In order for grid cell to fit itself to the content inside. This has to be tested though, in order to see if something like "width: full" or something else fits better. */

.grid-cell {
  width: fit-content;
}

@media (min-width: 640px) {
  .grid-container {
    grid-template-columns: repeat(2, fit-content(100%));
  }
}
